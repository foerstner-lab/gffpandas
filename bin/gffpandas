import argparse

import argcomplete

from gffpandaslib.annotation_overlap_fetcher import AnnotationOverlapFetcher as AOF
from gffpandaslib.gff3_exporter import Gff3Exporter


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help="commands")
    # ___________________________________________________________________
    show_version_parser = subparsers.add_parser("version", help="Show version")
    show_version_parser.set_defaults(func=show_version)
    # ___________________________________________________________________
    exporter_parser = subparsers.add_parser("export",
                                            help="Export GFF3 file to various formats")
    exporter_parser.set_defaults(func=export_to_table)
    exporter_parser.add_argument("--input_gff", "-i", required=True, type=str,
                                 help="URL/file path to gff file or compressed gff")
    exporter_parser.add_argument("--output_file", "-o", required=True, type=str,
                                 help="Output file path and name including extension")
    exporter_parser.add_argument("--export_type", "-t", required=True, choices=["csv", "tsv", "xlsx", "md", "gff"],
                                 help="Output type of the export")
    exporter_parser.add_argument("--drop_columns", "-d", required=False, type=str, nargs="+",
                                 help="Mention a space separated column names to remove (lower case only)")
    exporter_parser.add_argument("--expand_attributes", "-e", action='store_true', default=False,
                                 help="Expand attributes to multiple columns")

    # ___________________________________________________________________
    aof_parser = subparsers.add_parser("fetch_overlap",
                                       help="Fetches overlapping annotations from 2 sets and adds it to the attributes")
    aof_parser.set_defaults(func=fetch_overlap)
    aof_parser.add_argument("--input_gff_a", "-i_a", required=True, type=str,
                            help="URL/file path to gff file or compressed gff")
    aof_parser.add_argument("--input_gff_b", "-i_b", required=True, type=str,
                            help="URL/file path to gff file or compressed gff")
    aof_parser.add_argument("--output_file", "-o", required=True, type=str,
                            help="Output file path and name including extension")
    aof_parser.add_argument("--prefix", "-t", required=True, type=str,
                            help="Any marking prefix string")
    aof_parser.add_argument("--allow_different_strands", "-a", default=False, action='store_true',
                            help="All different strand overlap")
    # ___________________________________________________________________
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # if args.export_type == 'gff' and (args.expand_attributes is True or args.drop_columns is not None):
    #     parser.error("Arguments error: --export_type 'gff' cannot be used with"
    #                  "arguments --expand_attributes or --drop_columns")
    if "func" in dir(args):
        args.func(args)
    else:
        parser.print_help()


def show_version(args):
    """
    Version
    """
    # TODO
    pass


def export_to_table(args):
    if args.export_type == "gff":
        Gff3Exporter(args.input_gff).export_to_gff(output_file=args.output_file)
    else:
        Gff3Exporter(args.input_gff).export_to_table(to=args.export_type, output_file=args.output_file,
                                                     expand_attributes=True, drop_columns=args.drop_columns)


def fetch_overlap(args):
    AOF(args.input_gff_a, args.input_gff_b, args.prefix, args.output_file) \
        .fetch_overlaps(allow_different_strands=args.allow_different_strands)


main()
